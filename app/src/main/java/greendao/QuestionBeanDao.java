package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhks.safetyproduction.entity.QuestionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_BEAN".
*/
public class QuestionBeanDao extends AbstractDao<QuestionBean, Long> {

    public static final String TABLENAME = "QUESTION_BEAN";

    /**
     * Properties of entity QuestionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Que = new Property(1, String.class, "que", false, "QUE");
        public final static Property QuestionNo = new Property(2, int.class, "questionNo", false, "QUESTION_NO");
        public final static Property ChoiceA = new Property(3, String.class, "choiceA", false, "CHOICE_A");
        public final static Property ChoiceB = new Property(4, String.class, "choiceB", false, "CHOICE_B");
        public final static Property ChoiceC = new Property(5, String.class, "choiceC", false, "CHOICE_C");
        public final static Property ChoiceD = new Property(6, String.class, "choiceD", false, "CHOICE_D");
        public final static Property Kind = new Property(7, String.class, "kind", false, "KIND");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
        public final static Property Answer = new Property(9, String.class, "answer", false, "ANSWER");
        public final static Property Detail = new Property(10, String.class, "detail", false, "DETAIL");
    }


    public QuestionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"QUE\" TEXT," + // 1: que
                "\"QUESTION_NO\" INTEGER NOT NULL ," + // 2: questionNo
                "\"CHOICE_A\" TEXT," + // 3: choiceA
                "\"CHOICE_B\" TEXT," + // 4: choiceB
                "\"CHOICE_C\" TEXT," + // 5: choiceC
                "\"CHOICE_D\" TEXT," + // 6: choiceD
                "\"KIND\" TEXT," + // 7: kind
                "\"TYPE\" TEXT," + // 8: type
                "\"ANSWER\" TEXT," + // 9: answer
                "\"DETAIL\" TEXT);"); // 10: detail
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String que = entity.getQue();
        if (que != null) {
            stmt.bindString(2, que);
        }
        stmt.bindLong(3, entity.getQuestionNo());
 
        String choiceA = entity.getChoiceA();
        if (choiceA != null) {
            stmt.bindString(4, choiceA);
        }
 
        String choiceB = entity.getChoiceB();
        if (choiceB != null) {
            stmt.bindString(5, choiceB);
        }
 
        String choiceC = entity.getChoiceC();
        if (choiceC != null) {
            stmt.bindString(6, choiceC);
        }
 
        String choiceD = entity.getChoiceD();
        if (choiceD != null) {
            stmt.bindString(7, choiceD);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(8, kind);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(10, answer);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(11, detail);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String que = entity.getQue();
        if (que != null) {
            stmt.bindString(2, que);
        }
        stmt.bindLong(3, entity.getQuestionNo());
 
        String choiceA = entity.getChoiceA();
        if (choiceA != null) {
            stmt.bindString(4, choiceA);
        }
 
        String choiceB = entity.getChoiceB();
        if (choiceB != null) {
            stmt.bindString(5, choiceB);
        }
 
        String choiceC = entity.getChoiceC();
        if (choiceC != null) {
            stmt.bindString(6, choiceC);
        }
 
        String choiceD = entity.getChoiceD();
        if (choiceD != null) {
            stmt.bindString(7, choiceD);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(8, kind);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(10, answer);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(11, detail);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionBean readEntity(Cursor cursor, int offset) {
        QuestionBean entity = new QuestionBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // que
            cursor.getInt(offset + 2), // questionNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // choiceA
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // choiceB
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // choiceC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // choiceD
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // kind
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // answer
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // detail
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setQue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQuestionNo(cursor.getInt(offset + 2));
        entity.setChoiceA(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChoiceB(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChoiceC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChoiceD(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setKind(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAnswer(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDetail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
