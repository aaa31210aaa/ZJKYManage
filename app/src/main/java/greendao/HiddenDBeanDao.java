package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhks.safetyproduction.entity.HiddenDBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HIDDEN_DBEAN".
*/
public class HiddenDBeanDao extends AbstractDao<HiddenDBean, Long> {

    public static final String TABLENAME = "HIDDEN_DBEAN";

    /**
     * Properties of entity HiddenDBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property HiddenId = new Property(0, Long.class, "hiddenId", true, "_id");
        public final static Property Trsource = new Property(1, String.class, "trsource", false, "TRSOURCE");
        public final static Property Trcategory = new Property(2, String.class, "trcategory", false, "TRCATEGORY");
        public final static Property Trlevel = new Property(3, String.class, "trlevel", false, "TRLEVEL");
        public final static Property Trsite = new Property(4, String.class, "trsite", false, "TRSITE");
        public final static Property Trsitename = new Property(5, String.class, "trsitename", false, "TRSITENAME");
        public final static Property Scregion = new Property(6, String.class, "scregion", false, "SCREGION");
        public final static Property Trfoundman = new Property(7, String.class, "trfoundman", false, "TRFOUNDMAN");
        public final static Property Trfounddate = new Property(8, String.class, "trfounddate", false, "TRFOUNDDATE");
        public final static Property Trdescribe = new Property(9, String.class, "trdescribe", false, "TRDESCRIBE");
        public final static Property Zgtype = new Property(10, String.class, "zgtype", false, "ZGTYPE");
        public final static Property Zgterm = new Property(11, String.class, "zgterm", false, "ZGTERM");
        public final static Property Zgdutyman = new Property(12, String.class, "zgdutyman", false, "ZGDUTYMAN");
        public final static Property Zgdutyunit = new Property(13, String.class, "zgdutyunit", false, "ZGDUTYUNIT");
        public final static Property Zgmeasure = new Property(14, String.class, "zgmeasure", false, "ZGMEASURE");
        public final static Property Ysdutyman = new Property(15, String.class, "ysdutyman", false, "YSDUTYMAN");
        public final static Property Ysdutyunit = new Property(16, String.class, "ysdutyunit", false, "YSDUTYUNIT");
        public final static Property InputDate = new Property(17, String.class, "inputDate", false, "INPUT_DATE");
        public final static Property IsCheck = new Property(18, boolean.class, "isCheck", false, "IS_CHECK");
        public final static Property FileList = new Property(19, String.class, "fileList", false, "FILE_LIST");
    }


    public HiddenDBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HiddenDBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HIDDEN_DBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: hiddenId
                "\"TRSOURCE\" TEXT," + // 1: trsource
                "\"TRCATEGORY\" TEXT," + // 2: trcategory
                "\"TRLEVEL\" TEXT," + // 3: trlevel
                "\"TRSITE\" TEXT," + // 4: trsite
                "\"TRSITENAME\" TEXT," + // 5: trsitename
                "\"SCREGION\" TEXT," + // 6: scregion
                "\"TRFOUNDMAN\" TEXT," + // 7: trfoundman
                "\"TRFOUNDDATE\" TEXT," + // 8: trfounddate
                "\"TRDESCRIBE\" TEXT," + // 9: trdescribe
                "\"ZGTYPE\" TEXT," + // 10: zgtype
                "\"ZGTERM\" TEXT," + // 11: zgterm
                "\"ZGDUTYMAN\" TEXT," + // 12: zgdutyman
                "\"ZGDUTYUNIT\" TEXT," + // 13: zgdutyunit
                "\"ZGMEASURE\" TEXT," + // 14: zgmeasure
                "\"YSDUTYMAN\" TEXT," + // 15: ysdutyman
                "\"YSDUTYUNIT\" TEXT," + // 16: ysdutyunit
                "\"INPUT_DATE\" TEXT," + // 17: inputDate
                "\"IS_CHECK\" INTEGER NOT NULL ," + // 18: isCheck
                "\"FILE_LIST\" TEXT);"); // 19: fileList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HIDDEN_DBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HiddenDBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHiddenId());
 
        String trsource = entity.getTrsource();
        if (trsource != null) {
            stmt.bindString(2, trsource);
        }
 
        String trcategory = entity.getTrcategory();
        if (trcategory != null) {
            stmt.bindString(3, trcategory);
        }
 
        String trlevel = entity.getTrlevel();
        if (trlevel != null) {
            stmt.bindString(4, trlevel);
        }
 
        String trsite = entity.getTrsite();
        if (trsite != null) {
            stmt.bindString(5, trsite);
        }
 
        String trsitename = entity.getTrsitename();
        if (trsitename != null) {
            stmt.bindString(6, trsitename);
        }
 
        String scregion = entity.getScregion();
        if (scregion != null) {
            stmt.bindString(7, scregion);
        }
 
        String trfoundman = entity.getTrfoundman();
        if (trfoundman != null) {
            stmt.bindString(8, trfoundman);
        }
 
        String trfounddate = entity.getTrfounddate();
        if (trfounddate != null) {
            stmt.bindString(9, trfounddate);
        }
 
        String trdescribe = entity.getTrdescribe();
        if (trdescribe != null) {
            stmt.bindString(10, trdescribe);
        }
 
        String zgtype = entity.getZgtype();
        if (zgtype != null) {
            stmt.bindString(11, zgtype);
        }
 
        String zgterm = entity.getZgterm();
        if (zgterm != null) {
            stmt.bindString(12, zgterm);
        }
 
        String zgdutyman = entity.getZgdutyman();
        if (zgdutyman != null) {
            stmt.bindString(13, zgdutyman);
        }
 
        String zgdutyunit = entity.getZgdutyunit();
        if (zgdutyunit != null) {
            stmt.bindString(14, zgdutyunit);
        }
 
        String zgmeasure = entity.getZgmeasure();
        if (zgmeasure != null) {
            stmt.bindString(15, zgmeasure);
        }
 
        String ysdutyman = entity.getYsdutyman();
        if (ysdutyman != null) {
            stmt.bindString(16, ysdutyman);
        }
 
        String ysdutyunit = entity.getYsdutyunit();
        if (ysdutyunit != null) {
            stmt.bindString(17, ysdutyunit);
        }
 
        String inputDate = entity.getInputDate();
        if (inputDate != null) {
            stmt.bindString(18, inputDate);
        }
        stmt.bindLong(19, entity.getIsCheck() ? 1L: 0L);
 
        String fileList = entity.getFileList();
        if (fileList != null) {
            stmt.bindString(20, fileList);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HiddenDBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHiddenId());
 
        String trsource = entity.getTrsource();
        if (trsource != null) {
            stmt.bindString(2, trsource);
        }
 
        String trcategory = entity.getTrcategory();
        if (trcategory != null) {
            stmt.bindString(3, trcategory);
        }
 
        String trlevel = entity.getTrlevel();
        if (trlevel != null) {
            stmt.bindString(4, trlevel);
        }
 
        String trsite = entity.getTrsite();
        if (trsite != null) {
            stmt.bindString(5, trsite);
        }
 
        String trsitename = entity.getTrsitename();
        if (trsitename != null) {
            stmt.bindString(6, trsitename);
        }
 
        String scregion = entity.getScregion();
        if (scregion != null) {
            stmt.bindString(7, scregion);
        }
 
        String trfoundman = entity.getTrfoundman();
        if (trfoundman != null) {
            stmt.bindString(8, trfoundman);
        }
 
        String trfounddate = entity.getTrfounddate();
        if (trfounddate != null) {
            stmt.bindString(9, trfounddate);
        }
 
        String trdescribe = entity.getTrdescribe();
        if (trdescribe != null) {
            stmt.bindString(10, trdescribe);
        }
 
        String zgtype = entity.getZgtype();
        if (zgtype != null) {
            stmt.bindString(11, zgtype);
        }
 
        String zgterm = entity.getZgterm();
        if (zgterm != null) {
            stmt.bindString(12, zgterm);
        }
 
        String zgdutyman = entity.getZgdutyman();
        if (zgdutyman != null) {
            stmt.bindString(13, zgdutyman);
        }
 
        String zgdutyunit = entity.getZgdutyunit();
        if (zgdutyunit != null) {
            stmt.bindString(14, zgdutyunit);
        }
 
        String zgmeasure = entity.getZgmeasure();
        if (zgmeasure != null) {
            stmt.bindString(15, zgmeasure);
        }
 
        String ysdutyman = entity.getYsdutyman();
        if (ysdutyman != null) {
            stmt.bindString(16, ysdutyman);
        }
 
        String ysdutyunit = entity.getYsdutyunit();
        if (ysdutyunit != null) {
            stmt.bindString(17, ysdutyunit);
        }
 
        String inputDate = entity.getInputDate();
        if (inputDate != null) {
            stmt.bindString(18, inputDate);
        }
        stmt.bindLong(19, entity.getIsCheck() ? 1L: 0L);
 
        String fileList = entity.getFileList();
        if (fileList != null) {
            stmt.bindString(20, fileList);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HiddenDBean readEntity(Cursor cursor, int offset) {
        HiddenDBean entity = new HiddenDBean( //
            cursor.getLong(offset + 0), // hiddenId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trsource
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trcategory
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // trlevel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // trsite
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // trsitename
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // scregion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // trfoundman
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // trfounddate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // trdescribe
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // zgtype
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // zgterm
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // zgdutyman
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // zgdutyunit
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // zgmeasure
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ysdutyman
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ysdutyunit
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // inputDate
            cursor.getShort(offset + 18) != 0, // isCheck
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // fileList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HiddenDBean entity, int offset) {
        entity.setHiddenId(cursor.getLong(offset + 0));
        entity.setTrsource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrcategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrlevel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrsite(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTrsitename(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setScregion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTrfoundman(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTrfounddate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTrdescribe(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZgtype(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setZgterm(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setZgdutyman(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZgdutyunit(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setZgmeasure(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setYsdutyman(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setYsdutyunit(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInputDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsCheck(cursor.getShort(offset + 18) != 0);
        entity.setFileList(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HiddenDBean entity, long rowId) {
        entity.setHiddenId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HiddenDBean entity) {
        if(entity != null) {
            return entity.getHiddenId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HiddenDBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
